import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	ext {
		excludedFromCoverage = ['**/config/**','**/*Entity*']
		springBootVersion = '2.1.10.RELEASE'
		springSecurityVersion = '2.4.0.RELEASE'
		lombokVersion = '1.18.4'
		testNGVersion = '6.14.3'
		assertJVersion = '3.14.0'
		mockitoVersion = '2.23.+'
		mySQLConnectorVersion = '8.0.14'
		javaXVersion = '2.2'
		hibernateVersion = '3.5.6-Final'
		orikaVersion = '1.5.4'
		flywayVersion = '5.2.1'
		javaXRsVersion = '1.0'
		hibernateJava8Version = '5.4.9.Final'
		comSunXmlBindVersion = '2.3.2'
		apacheCommonsLang3Version = '3.9'
		googleCollectionsVersion = '1.0-rc2'
		swagger2Version = '2.9.2'
		googleGuavaVersion = '28.1-jre'
	}
	repositories {
		jcenter()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
		mavenLocal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
	}
}

// Apply general plugins.
plugins {
	id 'base'
	id 'idea'
	id 'eclipse'
	id 'project-report'
	id 'jacoco'
	id 'java'
	id 'groovy'
	id 'com.gradle.build-scan' version '2.0.2'
	id 'org.springframework.boot' version '2.0.9.RELEASE'
	id 'io.spring.dependency-management' version '1.0.7.RELEASE'
	id 'application'
}

repositories {
	jcenter()
	mavenCentral()
	maven { url "https://plugins.gradle.org/m2/" }
	mavenLocal()
}

mainClassName = 'com.minesweeper.MinesweeperApplication'

group = 'com.minesweeper'

springBoot {
	// This statement tells the Gradle Spring Boot plugin to generate a file
	// build/resources/main/META-INF/build-info.properties that is picked up 
	// by Spring Boot to display via /info endpoint.
	// https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/#integrating-with-actuator-build-info
	buildInfo()
}

// Java related vars
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// Fix IDEA plugin: send output to the same folder Gradle does.
idea {
	module {
		outputDir file('build/classes/main')
		testOutputDir file('build/classes/test')
		downloadJavadoc = true
		downloadSources = true
	}
}

// Fix variable expansion from Gradle to Spring Boot.
processResources {
	with copySpec {
		from 'src/main/resources'
		include '**/bootstrap*.yml'
		include '**/application*.yml'
		include '**/application*.yaml'
		include '**/application*.properties'
		project.properties.findAll().each {
			prop ->
				if (prop.value != null) {
					filter(ReplaceTokens, tokens: [(prop.key): prop.value])
					filter(ReplaceTokens, tokens: [('project.' + prop.key): prop.value])
				}
		}
	}
}

dependencies {
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

	compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

	compile group: 'com.google.guava', name: 'guava', version: "${googleGuavaVersion}"
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: "${springBootVersion}"
	compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: "${springBootVersion}"
	compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: "${springBootVersion}"
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: "${springBootVersion}"
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springBootVersion}"
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: "${springBootVersion}"
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: "${springBootVersion}"
	compile group: 'org.springframework.data', name: 'spring-data-jpa', version: "${springBootVersion}"
	compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth', version: "${springSecurityVersion}"
	compile group: 'ch.qos.logback', name: 'logback-access', version: '1.2.3'
	compile group: 'mysql', name: 'mysql-connector-java', version: "${mySQLConnectorVersion}"
	compile group: 'javax.persistence', name: 'javax.persistence-api', version: "${javaXVersion}"
	compile group: 'ma.glasnost.orika', name: 'orika-core', version: "${orikaVersion}"
	compile group: 'org.flywaydb', name: 'flyway-core', version: "${flywayVersion}"
	compile group: 'javax.ws.rs', name: 'javax.ws.rs', version: "${javaXRsVersion}"
	compile group: 'org.hibernate', name: 'hibernate-java8', version: "${hibernateJava8Version}"
	compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: "${comSunXmlBindVersion}"
	compile group: 'org.apache.commons', name: 'commons-lang3', version: "${apacheCommonsLang3Version}"
	compile group: 'com.google.collections', name: 'google-collections', version: "${googleCollectionsVersion}"
	compile group: 'io.springfox', name: 'springfox-swagger2', version: "${swagger2Version}"
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: "${swagger2Version}"

	testCompileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

	testCompile group: 'org.mockito', name: 'mockito-core', version: "${mockitoVersion}"
	testCompile group: 'org.testng', name: 'testng', version: "$testNGVersion"
	testCompile group: 'org.assertj', name: 'assertj-core', version: "$assertJVersion"

	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"
}

application {
	applicationDefaultJvmArgs = ['--illegal-access=permit']
}

test {
	useTestNG()

	// turn off Gradle's HTML report to avoid replacing the
	// reports generated by TestNG library
	reports.html.enabled = false

	// display results from the tests
	testLogging {
		events "PASSED", "FAILED", "SKIPPED"
	}
}
